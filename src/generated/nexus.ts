/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  DescriptionWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  ExampleWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  UserCreateInput: { // input type
    email: string; // String!
    name?: string | null; // String
    password: string; // String!
    statusMessage?: string | null; // String
  }
  UserUpdateInput: { // input type
    email?: string | null; // String
    name?: string | null; // String
    statusMessage?: string | null; // String
  }
  WordDeckWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  WordWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
  PartsOfSpeech: "ADJECTIVE" | "ADVERB" | "CONJUNCTION" | "INTERJUNCTION" | "NOUN" | "PREPOSITION" | "PRONOUN" | "VERB"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  Upload: any
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Description: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    meanings: string[]; // [String!]!
    partsOfSpeech: NexusGenEnums['PartsOfSpeech']; // PartsOfSpeech!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wordId: number; // Int!
  }
  Example: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    descriptionId: number; // Int!
    id: number; // Int!
    ja: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    vn: string; // String!
  }
  Mutation: {};
  Query: {};
  Subscription: {};
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    id: string; // String!
    name?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Word: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wordDeckId: number; // Int!
  }
  WordBook: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    summary: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  WordDeck: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    summary: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wordBookId: number; // Int!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  DescriptionWhereUniqueInput: NexusGenInputs['DescriptionWhereUniqueInput'];
  ExampleWhereUniqueInput: NexusGenInputs['ExampleWhereUniqueInput'];
  UserCreateInput: NexusGenInputs['UserCreateInput'];
  UserUpdateInput: NexusGenInputs['UserUpdateInput'];
  WordDeckWhereUniqueInput: NexusGenInputs['WordDeckWhereUniqueInput'];
  WordWhereUniqueInput: NexusGenInputs['WordWhereUniqueInput'];
  PartsOfSpeech: NexusGenEnums['PartsOfSpeech'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
  DateTime: NexusGenScalars['DateTime'];
  Upload: NexusGenScalars['Upload'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Description: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt: NexusGenScalars['DateTime'] | null; // DateTime
    examples: NexusGenRootTypes['Example'][]; // [Example!]!
    id: number; // Int!
    meanings: string[]; // [String!]!
    partsOfSpeech: NexusGenEnums['PartsOfSpeech']; // PartsOfSpeech!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    word: NexusGenRootTypes['Word']; // Word!
    wordId: number; // Int!
  }
  Example: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: NexusGenRootTypes['Description']; // Description!
    descriptionId: number; // Int!
    id: number; // Int!
    ja: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    vn: string; // String!
  }
  Mutation: { // field return type
    signIn: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signUp: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    updateProfile: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Subscription: { // field return type
    userSignedIn: NexusGenRootTypes['User'] | null; // User
    userUpdated: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    id: string; // String!
    name: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Word: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt: NexusGenScalars['DateTime'] | null; // DateTime
    descriptions: NexusGenRootTypes['Description'][]; // [Description!]!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wordDeck: NexusGenRootTypes['WordDeck']; // WordDeck!
    wordDeckId: number; // Int!
  }
  WordBook: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    summary: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wordDecks: NexusGenRootTypes['WordDeck'][]; // [WordDeck!]!
  }
  WordDeck: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deletedAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    summary: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wordBook: NexusGenRootTypes['WordBook']; // WordBook!
    wordBookId: number; // Int!
    words: NexusGenRootTypes['Word'][]; // [Word!]!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Description: { // field return type name
    createdAt: 'DateTime'
    deletedAt: 'DateTime'
    examples: 'Example'
    id: 'Int'
    meanings: 'String'
    partsOfSpeech: 'PartsOfSpeech'
    updatedAt: 'DateTime'
    word: 'Word'
    wordId: 'Int'
  }
  Example: { // field return type name
    createdAt: 'DateTime'
    deletedAt: 'DateTime'
    description: 'Description'
    descriptionId: 'Int'
    id: 'Int'
    ja: 'String'
    updatedAt: 'DateTime'
    vn: 'String'
  }
  Mutation: { // field return type name
    signIn: 'AuthPayload'
    signUp: 'AuthPayload'
    updateProfile: 'User'
  }
  Query: { // field return type name
    me: 'User'
    users: 'User'
  }
  Subscription: { // field return type name
    userSignedIn: 'User'
    userUpdated: 'User'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    deletedAt: 'DateTime'
    email: 'String'
    id: 'String'
    name: 'String'
    updatedAt: 'DateTime'
  }
  Word: { // field return type name
    createdAt: 'DateTime'
    deletedAt: 'DateTime'
    descriptions: 'Description'
    id: 'Int'
    updatedAt: 'DateTime'
    wordDeck: 'WordDeck'
    wordDeckId: 'Int'
  }
  WordBook: { // field return type name
    createdAt: 'DateTime'
    deletedAt: 'DateTime'
    id: 'Int'
    summary: 'String'
    title: 'String'
    updatedAt: 'DateTime'
    wordDecks: 'WordDeck'
  }
  WordDeck: { // field return type name
    createdAt: 'DateTime'
    deletedAt: 'DateTime'
    id: 'Int'
    summary: 'String'
    title: 'String'
    updatedAt: 'DateTime'
    wordBook: 'WordBook'
    wordBookId: 'Int'
    words: 'Word'
  }
}

export interface NexusGenArgTypes {
  Description: {
    examples: { // args
      after?: NexusGenInputs['ExampleWhereUniqueInput'] | null; // ExampleWhereUniqueInput
      before?: NexusGenInputs['ExampleWhereUniqueInput'] | null; // ExampleWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    signIn: { // args
      email: string; // String!
      password: string; // String!
    }
    signUp: { // args
      user?: NexusGenInputs['UserCreateInput'] | null; // UserCreateInput
    }
    updateProfile: { // args
      user?: NexusGenInputs['UserUpdateInput'] | null; // UserUpdateInput
    }
  }
  Subscription: {
    userSignedIn: { // args
      userId: string; // String!
    }
    userUpdated: { // args
      userId: string; // String!
    }
  }
  Word: {
    descriptions: { // args
      after?: NexusGenInputs['DescriptionWhereUniqueInput'] | null; // DescriptionWhereUniqueInput
      before?: NexusGenInputs['DescriptionWhereUniqueInput'] | null; // DescriptionWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  WordBook: {
    wordDecks: { // args
      after?: NexusGenInputs['WordDeckWhereUniqueInput'] | null; // WordDeckWhereUniqueInput
      before?: NexusGenInputs['WordDeckWhereUniqueInput'] | null; // WordDeckWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  WordDeck: {
    words: { // args
      after?: NexusGenInputs['WordWhereUniqueInput'] | null; // WordWhereUniqueInput
      before?: NexusGenInputs['WordWhereUniqueInput'] | null; // WordWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Description" | "Example" | "Mutation" | "Query" | "Subscription" | "User" | "Word" | "WordBook" | "WordDeck";

export type NexusGenInputNames = "DescriptionWhereUniqueInput" | "ExampleWhereUniqueInput" | "UserCreateInput" | "UserUpdateInput" | "WordDeckWhereUniqueInput" | "WordWhereUniqueInput";

export type NexusGenEnumNames = "PartsOfSpeech";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "String" | "Upload";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}